// Copyright contributors to the IBM Security Verify Adaptive Proxy SDK
// for JavaScript project


const Service = require('../service');


/**
 * A class for making policy related requests to OIDC. These include the initial
 * grant request, as well as validating received JWT assertions.
 * @extends Service
 * @author Adam Dorogi-Kaposi <adam.dorogi-kaposi@ibm.com>
 */
class PolicyService extends Service {
  /**
   * Create a new {@link PolicyService} object.
   * @param {Object} auth The credentials to authenticate to OIDC.
   * @param {string} baseURL The base URL for the OIDC API.
   * @param {Object} context The context to send for assessment.
   * @param {string} context.sessionId The session ID generated by the
   * user-agent, using an Adaptive client SDK.
   * @param {string} context.userAgent The user-agent, typically obtained form
   * the User-Agent HTTP header.
   * @param {string} context.ipAddress The IP address of the user-agent.
   */
  constructor(auth, baseURL, context) {
    super(auth, baseURL, context, 'x-www-form-urlencoded');
  }

  /**
   * Evaluate the policy attached to the client application.
   *
   * Request an access token from OIDC with the <code>policyauth</code>
   * grant-type. OIDC will in turn evaluate the policy attached to the client
   * application, and will respond depending on the outocme of the evaluation.
   * The response from OIDC will be one of two statuses: <code>deny</code>, or
   * <code>requires</code>. A deny response is indicated by a 401 status code.
   * A 200 HTTP status code indicates a <code>requires</code> response.
   * @return {Promise<Object>} The HTTP response body for a
   * <code>requires</code> response from OIDC.
   * @throws {Error} A <code>deny</code> response is received.
   */
  async assess() {
    const response = await this.post('/v1.0/endpoint/default/token',
        {grant_type: 'policyauth', scope: 'openid',
          context: this._context});
    return response.data;
  }

  /**
   * Validate a JWT assertion received from a first- or second-factor
   * verification on OIDC.
   *
   * The response from OIDC will be one of three statuses: <code>allow</code>,
   * <code>deny</code>, or <code>requires</code>. A deny response is indicated
   * by a 401 status code. A 200 HTTP status code indicates an
   * <code>allow</code> or <code>requires</code> response.
   * @param {string} jwt The JWT assertion to validate.
   * @return {Promise<Object>} The HTTP response body for an <code>allow</code>
   * or <code>requires</code> response from OIDC.
   * @throws {Error} A <code>deny</code> response is received.
   */
  async validate(jwt) {
    const response = await this.post('/v1.0/endpoint/default/token',
        {grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
          scope: 'openid',
          context: this._context,
          assertion: jwt});
    return response.data;
  }
}

module.exports = PolicyService;
